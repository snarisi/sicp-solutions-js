/*Exercise 1.10.  The following procedure computes a mathematical function called Ackermann's function.*/

function a(x, y) {
  if (y === 0) {
    return 0;
  } else if (x === 0) {
    return y * 2;
  } else if (y === 1) {
    return 2;
  } else {
    return a(x - 1, a(x, y - 1));
  }
}

/*What are the values of the following expressions?*/

/*
a(1, 10)
a(0, a(1, 9))
a(0, a(0, a(1, 8)))
a(0, a(0, a(0, a(1, 7))))
a(0, a(0, a(0, a(0, a(1, 6)))))
a(0, a(0, a(0, a(0, a(0, a(1, 5))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(1, 4)))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 3))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 2)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 1))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, 2)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, 4))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, 8)))))))
a(0, a(0, a(0, a(0, a(0, a(0, 16))))))
a(0, a(0, a(0, a(0, a(0, 32)))))
a(0, a(0, a(0, a(0, 64))))
a(0, a(0, a(0, 128)))
a(0, a(0, 256))
a(0, 512)
1024
*/

/*
a(2, 4)
a(1, a(2, 3))
a(1, a(1, a(2, 2)))
a(1, a(1, a(1, a(2, 1))))
a(1, a(1, a(1, 2)))
a(1, a(1, a(0, a(1, 1))))
a(1, a(1, a(0, 2)))
a(1, a(1, 4))
a(1, a(0, a(1, 3)))
a(1, a(0, a(0, a(1, 2))))
a(1, a(0, a(0, a(0, a(1, 1)))))
a(1, a(0, a(0, a(0, 2))))
a(1, a(0, a(0, 4)))
a(1, a(0, 8))
a(1, 16)
a(0, a(1, 15))
a(0, a(0, a(1, 14)))
a(0, a(0, a(0, a(1, 13))))
a(0, a(0, a(0, a(0, a(1, 12)))))
a(0, a(0, a(0, a(0, a(0, a(1, 11))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(1, 10)))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 9))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 8)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(1, 7))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(1, 6)))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(1, 5))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(1, 4)))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(1, 3))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(1, 2)))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 1))))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(0, 2)))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, 4))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, 8)))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, 16))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, 32)))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, 64))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, 128)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, 256))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, 512)))))))
a(0, a(0, a(0, a(0, a(0, a(0, 1024))))))
a(0, a(0, a(0, a(0, a(0, 2048)))))
a(0, a(0, a(0, a(0, 4096))))
a(0, a(0, a(0, 8192)))
a(0, a(0, 16384))
a(0, 32768)
65536
*/

/*
a(3, 3)
a(2, a(3, 2))
a(2, a(2, a(3, 1)))
a(2, a(2, 2))
a(2, a(1, a(2, 1)))
a(2, a(1, 2))
a(2, a(0, a(1, 1)))
a(2, a(0, 2))
a(2, 4)
a(1, a(2, 3))
a(1, a(1, a(2, 2)))
a(1, a(1, a(1, a(2, 1))))
a(1, a(1, a(1, 2)))
a(1, a(1, a(0, a(1, 1))))
a(1, a(1, a(0, 2)))
a(1, a(1, 4))
a(1, a(0, a(1, 3)))
a(1, a(0, a(0, a(1, 2))))
a(1, a(0, a(0, a(0, a(1, 1)))))
a(1, a(0, a(0, a(0, 2))))
a(1, a(0, a(0, 4)))
a(1, a(0, 8))
a(1, 16)
a(0, a(1, 15))
a(0, a(0, a(1, 14)))
a(0, a(0, a(0, a(1, 13))))
a(0, a(0, a(0, a(0, a(1, 12)))))
a(0, a(0, a(0, a(0, a(0, a(1, 11))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(1, 10)))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 9))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 8)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(1, 7))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(1, 6)))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(1, 5))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(1, 4)))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(1, 3))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(1, 2)))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(0, a(1, 1))))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, a(0, 2)))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, a(0, 4))))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, a(0, 8)))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, a(0, 16))))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, a(0, 32)))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, a(0, 64))))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(a, 128)))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, a(0, 256))))))))
a(0, a(0, a(0, a(0, a(0, a(0, a(0, 512)))))))
a(0, a(0, a(0, a(0, a(0, a(0, 1024))))))
a(0, a(0, a(0, a(0, a(0, 2048)))))
a(0, a(0, a(0, a(0, 4096))))
a(0, a(0, a(0, 8192)))
a(0, a(0, 16384))
a(0, 32768)
65536
*/

/*Consider the following procedures, where A is the procedure defined above:*/

function f(n) {
  return a(0, n);
}

function g(n) {
  return a(1, n);
}

function h(n) {
  return a(2, n);
}

function k(n) {
  return 5 * n * n;
}

/*
Give concise mathematical definitions for the functions computed by the procedures f, g, and h for positive integer values of n. For example, k(n) computes 5n2
*/

/*
f(n) = 2n

g(n) = 2^n

h(n) = 2^(2^n)